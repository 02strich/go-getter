version: 2.1

references:
  images:
    go: &GOLANG_IMAGE circleci/golang:latest
  environments:
    tmp: &TEST_RESULTS_PATH /tmp/test-results # path to where test results are saved

# reusable 'executor' object for jobs
executors:
  go:
    docker:
      - image: *GOLANG_IMAGE
    environment:
      - TEST_RESULTS: *TEST_RESULTS_PATH

jobs:
  go-fmt-and-test:
    executor: go
    steps:
      - checkout
      - run: mkdir -p $TEST_RESULTS

      # Restore go module cache if there is one
      - restore_cache:
          keys:
            - go-getter-modcache-v1-{{ checksum "go.mod" }}

      - run: go mod download

      # Save go module cache if the go.mod file has changed
      - save_cache:
          key: go-getter-modcache-v1-{{ checksum "go.mod" }}
          paths:
            - "/go/pkg/mod"

      # check go fmt output because it does not report non-zero when there are fmt changes
      - run:
          name: check go fmt
          command: |
            files=$(go fmt ./...)
            if [ -n "$files" ]; then
              echo "The following file(s) do not conform to go fmt:"
              echo "$files"
              exit 1
            fi

      # run go tests with gotestsum
      - run: |
          PACKAGE_NAMES=$(go list ./...)
          gotestsum --format=short-verbose --junitfile $TEST_RESULTS/gotestsum-report.xml -- $PACKAGE_NAMES
      - store_test_results:
          path: *TEST_RESULTS_PATH
      - store_artifacts:
          path: *TEST_RESULTS_PATH

  go-smb-test:
    working_directory: /go-getter
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0

      - run:
          name: start smb server and gogetter containers
          command: |
            docker-compose up -d

      - run:
          name: wait for containers to start
          command: sleep 60

      - run:
          name: prepare server and client to run tests
          command: |
            docker exec -it samba bash -c "echo 'Hello' > data/file.txt && mkdir -p data/subdir && echo 'Hello' > data/subdir/file.txt"
            docker cp ./ gogetter:/go-getter/
            docker exec -it gogetter bash -c "go mod download \
                  && apt-get update \
                  && apt-get -y install smbclient"

      - run:
          name: run smb getter tests
          command: |
            docker exec -it gogetter bash -c "env ACC_SMB_TEST=1 go test -v ./... -run=TestSmbGetter_"

workflows:
  version: 2
  test-and-build:
    jobs:
      - go-fmt-and-test
      - go-smb-test
